rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for user validation
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth != null && (
        request.auth.token.email == 'Carl.Jukes@dakin-flathers.com' ||
        request.auth.token.email == 'carl.jukes@dakin-flathers.com' ||
        request.auth.uid == 'GRkjeVQpVvVgu9EwMAJIwPzZ03M2'
      );
    }
    
    function isValidEmail() {
      return request.auth != null && 
             request.auth.token.email != null && 
             request.auth.token.email.matches('.*@.*');
    }
    
    // User management - only authenticated users can manage their own data
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow write: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated() && isOwner(userId);
      allow delete: if isAdmin();
    }
    
    // Setup users - only admins can manage
    match /setup_users/{userId} {
      allow read, write: if isAdmin();
    }
    
    // Items - all authenticated users can read/write
    match /items/{itemId} {
      allow read, write: if isAuthenticated();
      
      // Validate item data structure
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['itemCode', 'systemCode', 'category', 'status']) &&
        request.resource.data.status in ['pending', 'placed', 'removed'] &&
        request.resource.data.weight is number &&
        request.resource.data.weight >= 0;
        
      allow update: if isAuthenticated() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'status', 'location', 'locationVerified', 'lastUpdated', 'metadata'
        ]);
    }
    
    // Locations - all authenticated users can read/write
    match /locations/{locationId} {
      allow read, write: if isAuthenticated();
      
      // Validate location data structure
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['code', 'row', 'bay', 'level', 'maxWeight']) &&
        request.resource.data.maxWeight is number &&
        request.resource.data.maxWeight >= 0 &&
        request.resource.data.currentWeight is number &&
        request.resource.data.currentWeight >= 0;
        
      allow update: if isAuthenticated() && 
        request.resource.data.currentWeight is number &&
        request.resource.data.currentWeight >= 0 &&
        request.resource.data.currentWeight <= request.resource.data.maxWeight;
    }
    
    // Actions (warehouse tasks) - all authenticated users can read/write
    match /actions/{actionId} {
      allow read, write: if isAuthenticated();
      
      // Validate action data structure
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['itemId', 'itemCode', 'systemCode', 'actionType', 'status']) &&
        request.resource.data.actionType in ['in', 'out'] &&
        request.resource.data.status in ['pending', 'in-progress', 'completed'] &&
        request.resource.data.weight is number &&
        request.resource.data.weight >= 0;
    }
    
    // Movements (audit trail) - all authenticated users can read/write
    match /movements/{movementId} {
      allow read, write: if isAuthenticated();
      
      // Validate movement data structure
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['itemId', 'type', 'operator']) &&
        request.resource.data.type in ['IN', 'OUT'] &&
        request.resource.data.weight is number &&
        request.resource.data.weight >= 0;
        
      // Movements should not be updated once created (audit trail)
      allow update: if false;
    }
    
    // Categories - all authenticated users can read, only admins can write
    match /categories/{categoryId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
      
      // Validate category data structure
      allow create: if isAdmin() && 
        request.resource.data.keys().hasAll(['name', 'prefix']) &&
        request.resource.data.name is string &&
        request.resource.data.prefix is string;
    }
    
    // Departments - all authenticated users can read, only admins can write
    match /departments/{departmentId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
      
      // Validate department data structure
      allow create: if isAdmin() && 
        request.resource.data.keys().hasAll(['name', 'active']) &&
        request.resource.data.name is string &&
        request.resource.data.active is bool;
    }
    
    // Notifications - all authenticated users can read/write
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated();
      
      // Validate notification data structure
      allow create: if isAuthenticated() && 
        request.resource.data.keys().hasAll(['type', 'status']) &&
        request.resource.data.type is string &&
        request.resource.data.status in ['pending', 'sent', 'error'];
    }
    
    // System collections for testing and connection monitoring
    match /test/{document} {
      allow read, write: if isAuthenticated();
    }
    
    match /test_connection/{document} {
      allow read, write: if isAuthenticated();
    }
    
    match /__connectionTest__/{document} {
      allow read, write: if isAuthenticated();
    }
    
    // Deny all other paths by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}